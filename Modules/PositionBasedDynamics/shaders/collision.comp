#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(std430, binding = 0) buffer positionBuffer
{
        vec4 position[];
};

layout(std430, binding = 1) buffer positionBufferTmp
{
        vec4 positionTmp[];
};

layout(std430, binding = 2) buffer velocityBuffer
{
        vec4 velocity[];
};

uniform float ConstraintWeight;

void main()
{
    uint X = gl_GlobalInvocationID.x;
    uint Y = gl_GlobalInvocationID.y;
    uint resX = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    uint IDX = Y * resX + X;

    vec3 pos = positionTmp[IDX].xyz;
    vec3 npos = pos;
    vec3 C = vec3(0.0, -0.5, 0.0);
    float R = 0.5;
    vec3 D = pos - C;
    float d = length(D);
    if(d < R) {
        D /= d;
        npos = C + D*R;
        npos = ConstraintWeight * pos + (1.0 - ConstraintWeight) * npos;
    }
    positionTmp[IDX].xyz = npos;
}
