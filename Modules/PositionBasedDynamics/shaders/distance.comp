#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(std430, binding = 0) buffer positionBuffer
{
        vec4 position[];
};

layout(std430, binding = 1) buffer positionBufferTmp
{
        vec4 positionTmp[];
};

layout(std430, binding = 2) buffer velocityBuffer
{
        vec4 velocity[];
};

uniform float ConstraintWeight;


vec3 deltaPos (uint ID, uint neighborID)
{
    float originalDist = length (position[neighborID].xyz - position[ID].xyz);
    float currentDist = length (positionTmp[neighborID].xyz - positionTmp[ID].xyz);

    return (positionTmp[neighborID].xyz - positionTmp[ID].xyz) / currentDist * ((currentDist - originalDist) * 0.5 * ConstraintWeight);
}

void main()
{
    uint X = gl_GlobalInvocationID.x;
    uint Y = gl_GlobalInvocationID.y;
    uint resX = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    uint resY = gl_NumWorkGroups.y * gl_WorkGroupSize.y;
    uint IDX = Y * resX + X;

    if(X > 0) {
        positionTmp[IDX].xyz += deltaPos (IDX, IDX-1);
        if (Y > 0) {
            positionTmp[IDX].xyz += deltaPos (IDX, IDX-1-resX);
        }
        if (Y < resY) {
            positionTmp[IDX].xyz += deltaPos (IDX, IDX-1+resX);
        }
    }
    if(X < resX) {
        positionTmp[IDX].xyz += deltaPos (IDX, IDX+1);
        if (Y > 0) {
            positionTmp[IDX].xyz += deltaPos (IDX, IDX+1-resX);
        }
        if (Y < resY) {
            positionTmp[IDX].xyz += deltaPos (IDX, IDX+1+resX);
        }
    }
    if(Y > 0) {
        positionTmp[IDX].xyz += deltaPos (IDX, IDX-resX);
    }
    if (Y < resY) {
        positionTmp[IDX].xyz += deltaPos (IDX, IDX+resX);
    }
}
